from matplotlib import pyplot as plt
import numpy as np
import tensorcircuit as tc
s_x=np.array([[0,1],[1,0]])
s_y=np.array([[0,0+1j],[0-1j,0]])
s_z=np.array([[1,0],[0,-1]])
def con_dot(x):
    a=x[0]
    for i in range(1,len(x)):
        a=np.dot(a,x[i])
    return a
def multiple(x):
    a=1
    for i in range(1,x+1):
        a=a*i
    return a
def exp(x):
    sum=np.array([[0,0],[0,0]])
    for i in range(0,100):
        y=[x]*i
        sum = sum + (con_dot(y)/multiple(i))
    return sum
#2.1 visualize the rotation
from matplotlib import pyplot as plt
import numpy as np
theta = np.pi/4
R = np.array([[np.cos(theta),np.sin(theta)],[-np.sin(theta),np.cos(theta)]])
A1 = np.array([1,0]).T
A2 = np.dot(R,A1)
x1 = np.linspace(0,A1[0],100)
y1 = np.linspace(0,A1[1],100)
x2 = np.linspace(0,A2[0],100)
y2 = np.linspace(0,A2[1],100)
plt.figure(figsize=(8,6),dpi=80)
plt.plot(x1,y1,color="blue",linewidth=3)
plt.plot(x2,y2,color="green",linewidth=3)
plt.show()
#2.2 prove the formula
for i in range(3):
    theta = 1
    print(exp(1j * theta * s_tuple[i]) - np.cos(theta) * np.array([[1, 0], [0, 1]]) - np.sin(theta) * s_tuple[i])
satisfied condition:P*P=I,which Pauli matrixs satisfy
#2-3 expect of matrix
def expect(x,y,theta):
    H = exp(1j*theta*s_tuple[x]/2)
    v_theta_1 = np.dot(H,np.array([1,0]).T)
    v_theta_2 = np.conjugate(v_theta_1).T
    result = con_dot([v_theta_2,s_tuple[y],v_theta_1])
    return result
plt.figure(figsize=(8,6),dpi=80)
x1 = np.linspace(0,2*np.pi,100)
y1 = []
for i in range(100):
    y1.append(expect(0,2,x1[i]))
plt.plot(x1,y1,linewidth=3,color="blue",label="(0,2)(1,2)")
#*************************************
x2 = np.linspace(0,2*np.pi,100)
y2 = []
for i in range(100):
    y2.append(expect(1,0,x2[i]))
plt.plot(x2,y2,linewidth=3,color="green",label="(0,1)(1,0)")
#**************************************
x3 = np.linspace(0,2*np.pi,100)
y3 = []
for i in range(100):
    y3.append(expect(2,2,x3[i]))
plt.plot(x3,y3,linewidth=3,color="red",label="(2,2)")
#*****************************************************
x4 = np.linspace(0,2*np.pi,100)
y4 = []
for i in range(100):
    y4.append(expect(2,0,x4[i]))
plt.plot(x4,y4,linewidth=3,color="orange",label="(0,2)(1,2)")
plt.xticks([0,np.pi/2,np.pi,3*np.pi/2,2*np.pi],[r"$o$",r"$\pi/2$",r"$\pi$",r"$3\pi/2$",r"$2\pi$"])
plt.show()
#2_4There are n qubit (example:n=10)
n = 10
H = 0
for i in range(n):
    list_eye = [np.eye(2)]*n
    list_eye[i] = s_z
    H = H + con_mu(list_eye)
for j in range(n-1):
    list_eye1,list_eye2 = [np.eye(2)]*n, [np.eye(2)]*n
    list_eye1[j] = s_x
    list_eye2[j+1] = s_x
    H = H + np.dot(con_mu(list_eye1),con_mu(list_eye2))
l=np.array([0]*(2**n))
l[0]=1
print(con_dot([l,H,l.T]))
#The expect is equal to n
